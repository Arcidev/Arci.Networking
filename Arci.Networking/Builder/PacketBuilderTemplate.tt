<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<# Type[] types = new[] {
    typeof(SByte), typeof(Int16), typeof(Int32), typeof(Int64),
    typeof(Byte), typeof(UInt16), typeof(UInt32), typeof(UInt64)
    };
#>
<# Type[] byteOnlyTypes = new[] {
    typeof(byte[]), typeof(Single), typeof(Double), typeof(Decimal),
    typeof(string), typeof(Guid)
    };
#>

using System;

namespace Arci.Networking.Builder
{
    public partial class PacketBuilder
    {
        <# foreach (var type in types.Concat(byteOnlyTypes))
        { #>

        /// <summary>
        /// Writes <#= type.Name #> value to packet
        /// </summary>
        /// <param name="val">Value to be written</param>
        /// <returns>This PacketBuilder</returns>
        public PacketBuilder Write(<#= type.Name #> val)
        {
            packet.Write(val);
            return this;
        }
        <# 
        } #>
        <# foreach (var type in types)
        { #>

        /// <summary>
        /// Writes 1 if <#= type.Name #> value is different from 0, otherwise writes 0
        /// </summary>
        /// <param name="bit">Value to be written</param>
        /// <returns>This PacketBuilder</returns>
        public PacketBuilder WriteBit(<#= type.Name #> bit)
        {
            packet.WriteBit(bit);
            return this;
        }

        /// <summary>
        /// Writes value with specified number of bits
        /// </summary>
        /// <param name="value">Value to be written</param>
        /// <param name="bitsCount">Number of bits that value should written with</param>
        /// <returns>This PacketBuilder</returns>
        public PacketBuilder WriteBits(<#= type.Name #> value, byte bitsCount)
        {
            packet.WriteBits(value, bitsCount);
            return this;
        }
        <# 
        } #>

    }
}
