<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<# Type[] types = new[] {
    typeof(Int16), typeof(Int32), typeof(SByte), typeof(Int64),
    typeof(UInt16), typeof(UInt32), typeof(Byte), typeof(UInt64),
    typeof(String), typeof(Single), typeof(Double), typeof(Decimal)
    };
#>
<# Type[] sizeTypes = new[] {
    typeof(byte[])
    };
#>

using Arci.Networking.Data;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Arci.Networking.Object
{
    public abstract partial class PacketObject
    {
        private static object ReadPacketProperty(ByteBuffer byteBuffer, Type type)
        {
            switch(Type.GetTypeCode(type))
            {
                <# foreach (var type in types)
                { #>

                case TypeCode.<#= type.Name #>:
                    return byteBuffer.Read<#= type.Name #>();
                <# 
                } #>

                default:
                    if (type == typeof(Guid))
                    {
                        return byteBuffer.ReadGuid();
                    } else if (type == typeof(PacketGuid))
                    {
                        return byteBuffer.ReadPacketGuid();
                    } else if (type.IsGenericType && type.GetInterfaces().Any(x => x.GetGenericTypeDefinition() == typeof(ICollection<>)))
                    {
                        var instance = Activator.CreateInstance(type);
                        var count = byteBuffer.ReadUInt16();
                        for (var i = 0; i < count; i++)
                        {
                            var value = ReadPacketProperty(byteBuffer, type.GetGenericArguments()[0]);
                            type.GetMethod("Add").Invoke(instance, new[] { value });
                        }
                        return instance;
                    } else if (type.IsArray)
                    {
                        var count = byteBuffer.ReadUInt16();
                        var arr = Array.CreateInstance(type.GetElementType(), count);
                        for (var i = 0; i < count; i++)
                            arr.SetValue(ReadPacketProperty(byteBuffer, type.GetElementType()), i);
                        return arr;
                    } else if (type.IsClass && type.GetConstructor(Type.EmptyTypes) != null)
                    {
                        var instance = Activator.CreateInstance(type);
                        ReadPacketProperties(byteBuffer, instance);
                        return instance;
                    }
                    return null;
            }
        }

        private static void WritePacketProperty(ByteBuffer byteBuffer, object value, Type type)
        {
            switch(Type.GetTypeCode(type))
            {
                <# foreach (var type in types)
                { #>

                case TypeCode.<#= type.Name #>:
                    byteBuffer.Write(Convert.To<#= type.Name #>(value));
                    break;
                <# 
                } #>

                default:
                    if (type == typeof(Guid))
                    {
                        byteBuffer.Write((Guid)value);
                    } else if (type == typeof(PacketGuid))
                    {
                        byteBuffer.Write((PacketGuid)value);
                    } else if (type.IsArray || (type.IsGenericType && type.GetInterfaces().Any(x => x.GetGenericTypeDefinition() == typeof(ICollection<>))))
                    {
                        if (!(value is IEnumerable collection))
                        {
                            byteBuffer.Write(0);
                            return;
                        }

                        var count = 0;
                        var itemsBuffer = new ByteBuffer();
                        foreach (var item in collection)
                        {
                            WritePacketProperty(itemsBuffer, item, type.GetElementType() ?? type.GetGenericArguments()[0]);
                            count++;
                        }

                        byteBuffer.Write(count);
                        byteBuffer.Write(itemsBuffer);
                    } else if (type.IsClass && type.GetConstructor(Type.EmptyTypes) != null)
                        WritePacketProperties(byteBuffer, value);
                    break;
            }
        }
    }
}
