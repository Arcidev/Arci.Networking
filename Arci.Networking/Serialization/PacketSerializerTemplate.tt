<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<# Type[] types = new[] {
    typeof(Int16), typeof(Int32), typeof(SByte), typeof(Int64),
    typeof(UInt16), typeof(UInt32), typeof(Byte), typeof(UInt64),
    typeof(String), typeof(Single), typeof(Double), typeof(Decimal),
    typeof(DateTime)
    };
#>
<# Type[] sizeTypes = new[] {
    typeof(byte[])
    };
#>

using Arci.Networking.Data;
using System;

namespace Arci.Networking.Serialization
{
    public static partial class PacketSerializer
    {
        private static object ReadPacketProperty(ByteBuffer byteBuffer, Type type)
        {
            switch(Type.GetTypeCode(type))
            {
                <# foreach (var type in types)
                { #>

                case TypeCode.<#= type.Name #>:
                    return byteBuffer.Read<#= type.Name #>();
                <# 
                } #>

                default:
                    return ReadPacketObject(byteBuffer, type);
            }
        }

        private static void WritePacketProperty(ByteBuffer byteBuffer, object value, Type type)
        {
            switch(Type.GetTypeCode(type))
            {
                <# foreach (var type in types)
                { #>

                case TypeCode.<#= type.Name #>:
                    byteBuffer.Write((<#= type.Name #>)value);
                    break;
                <# 
                } #>

                default:
                    WritePacketObject(byteBuffer, value, type);
                    break;
            }
        }
    }
}
