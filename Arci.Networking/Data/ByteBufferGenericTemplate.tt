<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<# Type[] types = new[] {
    typeof(SByte), typeof(Int16), typeof(Int32), typeof(Int64),
    typeof(Byte), typeof(UInt16), typeof(UInt32), typeof(UInt64)
    };
#>
<# Type[] sizeTypes = new[] {
    typeof(byte[])
    };
#>
<# Type[] byteOnlyTypes = new[] {
    typeof(Single), typeof(Double), typeof(Decimal)
    };
#>

using System;

namespace Arci.Networking.Data
{
    public partial class ByteBuffer : IDisposable
    {
        <# foreach (var type in types)
        { #>

        /// <summary>
        /// Reads <#= type.Name #> value from stream
        /// </summary>
        /// <returns><#= type.Name #> value from stream</returns>
        public <#= type.Name #> Read<#= type.Name #>()
        {
            return readData.Read<#= type.Name #>();
        }

        /// <summary>
        /// Writes <#= type.Name #> value to stream
        /// </summary>
        /// <param name="val">Value to be written</param>
        public void Write(<#= type.Name #> val)
        {
            writeData.Write(val);
        }

        /// <summary>
        /// Writes 1 if <#= type.Name #> value is different from 0, otherwise writes 0
        /// </summary>
        /// <param name="bit">Value to be written</param>
        public void WriteBit(<#= type.Name #> bit)
        {
            --bitPos;
            if (bit != 0)
                curBitVal |= (byte)(1 << bitPos);

            if (bitPos == 0)
                WriteCurBitVal();
        }

        /// <summary>
        /// Writes value with specified number of bits
        /// </summary>
        /// <param name="value">Value to be written</param>
        /// <param name="bitsCount">Number of bits that value should written with</param>
        public void WriteBits(<#= type.Name #> value, byte bitsCount)
        {
            for (int i = bitsCount - 1; i >= 0; i--)
                WriteBit(((<#= type.Name #>)1 << i) & value);
        }
        <# 
        } #>

        <# foreach (var type in byteOnlyTypes)
        { #>

        /// <summary>
        /// Reads <#= type.Name #> value from stream
        /// </summary>
        /// <returns><#= type.Name #> value from stream</returns>
        public <#= type.Name #> Read<#= type.Name #>()
        {
            return readData.Read<#= type.Name #>();
        }

        /// <summary>
        /// Writes <#= type.Name #> value to stream
        /// </summary>
        /// <param name="val">Value to be written</param>
        public void Write(<#= type.Name #> val)
        {
            writeData.Write(val);
        }

        <# 
        } #>

        /// <summary>
        /// Writes bit value to stream
        /// </summary>
        /// <param name="bit">Value to be written</param>
        public void WriteBit(bool bit)
        {
            --bitPos;
            if (bit)
                curBitVal |= (byte)(1 << bitPos);

            if (bitPos == 0)
                WriteCurBitVal();
        }
        <# foreach (var type in sizeTypes)
        { #>

        /// <summary>
        /// Writes <#= type.Name #> value to stream
        /// </summary>
        /// <param name="val">Value to be written</param>
        public void Write(<#= type.Name #> val)
        {
            writeData.Write((UInt16)val.Length);
            writeData.Write(val);
        }
        <# 
        } #>

        /// <summary>
        /// Writes current bit values to stream
        /// </summary>
        private void WriteCurBitVal()
        {
            Write(curBitVal);
            bitPos = 8;
            curBitVal = 0;
        }
    }
}
